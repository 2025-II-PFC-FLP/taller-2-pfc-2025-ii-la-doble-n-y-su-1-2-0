/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package taller
import scala.annotation.tailrec

object App {
  def main(args: Array[String]): Unit = {
    println(greeting())
  }

  def greeting(): String = "Hello, world!"
}

class ConjuntosDifusos {
  type ConjDifuso = Int => Double
  def pertenece(elem: Int, s:   ConjDifuso): Double = {
    s(elem)
  }

 /* def grande(d: Int)(e: Int): ConjDifuso = {
  }*/

  def complemento(c: ConjDifuso): ConjDifuso = {
    (x: Int) => 1.0 - c(x) // se recibe un conjunto difuso y devuelve otro conjunto difuso con la regla
  }

/* def union(cd1: ConjDifuso, cd2: ConjDifuso): ConjDifuso = {
   // Implementaci´on de la funci´on union
 ...
 }*/

 def interseccion(cd1: ConjDifuso, cd2: ConjDifuso): ConjDifuso = {
   (inter: Int)=>
     val Conj1= cd1(inter)
     val Conj2= cd2(inter)
      if(Conj1 < Conj2)
        Conj1
      else
        Conj2

 }

 /*def inclusion(cd1: ConjDifuso, cd2: ConjDifuso): Boolean = {
   // Implementaci´on de la funci´on inclusion
 ...
 }

 def igualdad(cd1: ConjDifuso, cd2: ConjDifuso): Boolean = {
   // Implementaci´on de la funci´on igualdad
 ...
 }
*/
}
