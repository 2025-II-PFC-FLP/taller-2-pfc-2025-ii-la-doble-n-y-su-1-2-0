  /*
  * This Scala Testsuite was generated by the Gradle 'init' task.
  */
  package taller

  import org.scalatest.funsuite.AnyFunSuite
  import org.junit.runner.RunWith
  import org.scalatestplus.junit.JUnitRunner

  @RunWith(classOf[JUnitRunner])
  class AppSuite extends AnyFunSuite {
  test("App has a greeting") {
    assert(App.greeting() != null)
  }
  val cd = new ConjuntosDifusos

  }

@RunWith(classOf[JUnitRunner])
class ConjuntosDifusosTest extends AnyFunSuite {

  val cd = new ConjuntosDifusos
  val Vacio: cd.ConjDifuso = _ => 0.0
  val universal: cd.ConjDifuso = _ => 1.0
  val testecito: cd.ConjDifuso = (x: Int) => if (x <= 5) 1.0 else 0.0
//_____________________________________________________________________________________________________________________
//            TEST PERTENECE
//  = 1 PERTENECE    //////   = 0 NO PERTENECE

  test("[NO PERTENECE A UN CONJUNTO VACIO]") {

    assert(cd.pertenece(5, Vacio) == 0.0)
    assert(cd.pertenece(100, Vacio) == 0.0)
  }

  test("[PERTENECE A UN CONJUNTO UNIVERSAL DE NUMEROS]") {
    assert(cd.pertenece(5, universal) == 1.0)
    assert(cd.pertenece(100, universal) == 1.0)
  }

  test("[PERTENECE O NO PERTENECE Al CONJUNTO DIFUSO TESTECITO :D ]") {
    assert(cd.pertenece(2, testecito) == 1.0) // pertenece totalmente
    assert(cd.pertenece(7, testecito) == 0.0) // no pertenece
  }
  test("PERTENECE CON UN GRADO DE PERTENENCIA PARCIAL 0.5") {
    val medio: cd.ConjDifuso = _ => 0.5
    assert(cd.pertenece(10, medio) == 0.5)
  }
  test("PERTENECE A UN CONJUNTO DE NUMEROS PARES") {
    val pares: cd.ConjDifuso =
      (x: Int) =>
        if (x % 2 == 0)
          1.0
        else
          0.0
    assert(cd.pertenece(4, pares) == 1.0)
    assert(cd.pertenece(7, pares) == 0.0)
  }
  test("PERTENECE EN UN GRADO PARCIAL 0.8 ") {
    val Ochenta: cd.ConjDifuso = _ => 0.8
    assert(cd.pertenece(15, Ochenta) == 0.8)
    assert(cd.pertenece(200, Ochenta) == 0.8)
  }
//_____________________________________________________________________________________________________________________
//           TEST COMPLEMENTO
//  = 1 PERTENECE A CONJUNTO COMPLEMENTARIO  //////   = 0 NO PERTENECE AL CONJUNTO COMPLEMENTARIO

  test("COMPLEMENTO DE UN CONJUNTO VACIO") {
    val vacio: cd.ConjDifuso = _ => 0.0
    val comp = cd.complemento(vacio)

    assert(comp(1) == 1.0)
    assert(comp(50) == 1.0)
    }

  test("COMPLEMENTO DE UN CONJUNTO UNIVERSAL") {
    val universal: cd.ConjDifuso = _ => 1.0
    val comp = cd.complemento(universal)

    assert(comp(1) == 0.0)
    assert(comp(50) == 0.0)
    }
  test("COMPLEMENTO DEVUELVE EL VALOR ORIGINAL") {
    val comp = cd.complemento(testecito)
    val dobleComp = cd.complemento(comp)

    assert(dobleComp(3) == testecito(3))
    assert(dobleComp(10) == testecito(10))
    }
  test("COMPLEMENTO DE UN CONJUNTO CON GRADO 0.3") {
    val Treinta: cd.ConjDifuso = _ => 0.3
    val comp = cd.complemento(Treinta)

    assert(comp(1) == 0.7)
    assert(comp(100) == 0.7)
  }

  test("COMPLEMENTO DE UN CONJUNTO CON GRADO 0.5") {
    val medio: cd.ConjDifuso = _ => 0.5
    val comp = cd.complemento(medio)

    assert(comp(10) == 0.5)
    assert(comp(100) == 0.5)
  }
//__________________________________________________________________________________________________________
//           TEST  INTERSECCION
//   = 0 fuera de la intersecciÃ³n //// = 1 pertenece a ambos conjuntos

  test("NUNCA INTERSECCION CON VACIO") {
    val inter = cd.interseccion(testecito, Vacio)

    assert(inter(2) == 0.0)
    assert(inter(10) == 0.0)
  }

  test("INTERSECCION CON UNIVERSAL DA EL MISMO CONJUNTO") {
    val inter = cd.interseccion(testecito, universal)

    assert(inter(4) == testecito(4))
    assert(inter(25) == testecito(25))
  }

  test("INTERSECCION CON EL MISMO CONJUNTO DEVUELVE EL MISMO CONJUNTO") {
    val inter = cd.interseccion(testecito, testecito)

    assert(inter(30) == testecito(30))
    assert(inter(9) == testecito(9))
  }

  test("INTERSECCION MINIMO ENTRE DOS GRADOS") {
    val c1: cd.ConjDifuso = _ => 0.7
    val c2: cd.ConjDifuso = _ => 0.4
    val inter = cd.interseccion(c1, c2)
    assert(inter(5) == 0.4)
  }

  test("INTERSECCION GRADOS DIFERENTES") {
    val c1: cd.ConjDifuso = (x: Int) =>
      if (x < 10)
        0.8
      else
        0.3
    val c2: cd.ConjDifuso = (x: Int) =>
      if (x < 10)
        0.5
      else
        0.9
    val inter = cd.interseccion(c1, c2)

    assert(inter(5) == 0.5)
    assert(inter(15) == 0.3)
    }

//______________________________________________________________________
//              TEST IGUALDAD

  test("IGUALDAD A SI MISMO") {
    assert(cd.igualdad(testecito, testecito))
    assert(cd.igualdad(universal, universal))
    assert(cd.igualdad(Vacio, Vacio))
  }

  test("NO HAY IGUALDAD EN UNIVERSAL Y VACIO") {
    assert(!cd.igualdad(universal, Vacio))
  }

  test("NO HAY IGUALDAD EN TESTECITO Y UNIVERSAL") {
    assert(!cd.igualdad( testecito, universal))
  }

  test("DOS CONJUNTOS CON LA MISMA DEFINICION SON IGUALES") {
    val c1: cd.ConjDifuso = (x: Int) =>
      if (x < 20)
        0.7
      else
        0.2
    val c2: cd.ConjDifuso = (x: Int) =>
      if (x < 20)
        0.7
      else
        0.2

    assert(cd.igualdad(c1, c2))
  }

  test("CONJUNTOS CON GRADOS DIFERENTES NO SON IGUALES") {
    val c1: cd.ConjDifuso = _ => 0.5
    val c2: cd.ConjDifuso = _ => 0.8

    assert(!cd.igualdad(c1, c2))
  }
}